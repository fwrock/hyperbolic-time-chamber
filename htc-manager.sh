#!/bin/bash

# HTC Management Script - Gerenciamento completo do sistema
# Facilita todas as opera√ß√µes do HTC com interface unificada

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir banner
print_banner() {
    echo -e "${CYAN}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó "
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù "
    echo ""
    echo "üöÄ HTC - Hyperbolic Time Chamber"
    echo "üìä Sistema Completo de Simula√ß√£o e An√°lise"
    echo "=========================================="
    echo -e "${NC}"
}

# Fun√ß√£o para mostrar menu principal
show_main_menu() {
    echo -e "${BLUE}üìã Menu Principal${NC}"
    echo "=================="
    echo "1.  üöÄ Iniciar Sistema (Otimizado)"
    echo "2.  üõë Parar Sistema"
    echo "3.  üîÑ Reiniciar Sistema"
    echo "4.  üìä Status dos Servi√ßos"
    echo "5.  üîç Diagn√≥stico Completo"
    echo "6.  üìà Executar An√°lise de Tr√°fego"
    echo "7.  üî¨ Executar Compara√ß√£o de Simuladores"
    echo "8.  üìÑ Gerar PDFs Acad√™micos"
    echo "9.  üóÑÔ∏è  Gerenciar Banco Cassandra"
    echo "10. üßπ Limpeza do Sistema"
    echo "11. üìã Ver Logs dos Servi√ßos"
    echo "12. üìä Monitor de Performance"
    echo "13. üõ†Ô∏è  Configura√ß√µes Avan√ßadas"
    echo "14. ‚ùì Ajuda e Documenta√ß√£o"
    echo "0.  üö™ Sair"
    echo ""
    echo -n "üëâ Escolha uma op√ß√£o (0-14): "
}

# Fun√ß√£o para iniciar sistema
start_system() {
    echo -e "${GREEN}üöÄ Iniciando HTC...${NC}"
    
    echo "Escolha o tipo de inicializa√ß√£o:"
    echo "1. Otimizada (Recomendada - Detecta recursos automaticamente)"
    echo "2. Configura√ß√£o M√≠nima (4-8GB RAM)"
    echo "3. Configura√ß√£o Padr√£o"
    echo -n "Op√ß√£o (1-3): "
    read -r start_option
    
    case $start_option in
        1)
            ./start-optimized.sh
            ;;
        2)
            docker compose -f docker-compose-minimal.yml up
            ;;
        3)
            docker compose up
            ;;
        *)
            echo "Op√ß√£o inv√°lida. Usando inicializa√ß√£o otimizada..."
            ./start-optimized.sh
            ;;
    esac
}

# Fun√ß√£o para parar sistema
stop_system() {
    echo -e "${YELLOW}üõë Parando HTC...${NC}"
    
    # Tentar parar com diferentes configura√ß√µes
    docker compose -f docker-compose-optimized.yml down 2>/dev/null || true
    docker compose -f docker-compose-minimal.yml down 2>/dev/null || true
    docker compose down 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Sistema parado!${NC}"
}

# Fun√ß√£o para reiniciar sistema
restart_system() {
    echo -e "${CYAN}üîÑ Reiniciando HTC...${NC}"
    stop_system
    sleep 2
    start_system
}

# Fun√ß√£o para mostrar status
show_status() {
    echo -e "${BLUE}üìä Status dos Servi√ßos${NC}"
    echo "======================"
    
    echo -e "\n${CYAN}Containers:${NC}"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "Nenhum container rodando"
    
    echo -e "\n${CYAN}Uso de Recursos:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "Nenhum container rodando"
    
    echo -e "\n${CYAN}Conectividade:${NC}"
    ./diagnose.sh connectivity
}

# Fun√ß√£o para executar diagn√≥stico
run_diagnostics() {
    echo -e "${PURPLE}üîç Diagn√≥stico Completo${NC}"
    echo "======================="
    ./diagnose.sh
}

# Fun√ß√£o para executar an√°lise de tr√°fego
run_traffic_analysis() {
    echo -e "${GREEN}üìà An√°lise de Tr√°fego${NC}"
    echo "===================="
    
    echo "Escolha a fonte de dados:"
    echo "1. Cassandra (Padr√£o)"
    echo "2. Arquivo CSV"
    echo -n "Op√ß√£o (1-2): "
    read -r data_option
    
    case $data_option in
        1)
            ./run_traffic_analysis.sh
            ;;
        2)
            echo -n "Caminho do arquivo CSV: "
            read -r csv_file
            if [ -f "$csv_file" ]; then
                ./run_traffic_analysis.sh --source csv --file "$csv_file"
            else
                echo -e "${RED}‚ùå Arquivo n√£o encontrado: $csv_file${NC}"
            fi
            ;;
        *)
            echo "Usando fonte padr√£o (Cassandra)..."
            ./run_traffic_analysis.sh
            ;;
    esac
}

# Fun√ß√£o para executar compara√ß√£o
run_comparison() {
    echo -e "${PURPLE}üî¨ Compara√ß√£o de Simuladores${NC}"
    echo "============================="
    
    echo "Op√ß√µes de compara√ß√£o:"
    echo "1. Exemplo de demonstra√ß√£o"
    echo "2. Compara√ß√£o com arquivos personalizados"
    echo -n "Op√ß√£o (1-2): "
    read -r comp_option
    
    case $comp_option in
        1)
            ./run_comparison.sh --sample
            ;;
        2)
            echo -n "Arquivo CSV do HTC: "
            read -r htc_file
            echo -n "Arquivo XML de refer√™ncia: "
            read -r ref_file
            
            if [ -f "$htc_file" ] && [ -f "$ref_file" ]; then
                ./run_comparison.sh --csv "$htc_file" "$ref_file"
            else
                echo -e "${RED}‚ùå Um ou ambos arquivos n√£o encontrados${NC}"
            fi
            ;;
        *)
            echo "Executando exemplo..."
            ./run_comparison.sh --sample
            ;;
    esac
}

# Fun√ß√£o para gerar PDFs
generate_pdfs() {
    echo -e "${CYAN}üìÑ Gera√ß√£o de PDFs Acad√™micos${NC}"
    echo "============================="
    
    if [ -f "./generate_academic_pdfs.sh" ]; then
        ./generate_academic_pdfs.sh
    else
        echo -e "${RED}‚ùå Script de PDFs n√£o encontrado${NC}"
    fi
}

# Fun√ß√£o para gerenciar Cassandra
manage_cassandra() {
    echo -e "${YELLOW}üóÑÔ∏è  Gerenciamento do Cassandra${NC}"
    echo "=============================="
    
    if [ -f "./manage_cassandra.sh" ]; then
        ./manage_cassandra.sh
    else
        echo "Op√ß√µes b√°sicas do Cassandra:"
        echo "1. Conectar ao console (cqlsh)"
        echo "2. Ver logs"
        echo "3. Reiniciar container"
        echo -n "Op√ß√£o (1-3): "
        read -r cass_option
        
        case $cass_option in
            1)
                docker exec -it htc-cassandra-db cqlsh
                ;;
            2)
                docker logs -f htc-cassandra-db
                ;;
            3)
                docker restart htc-cassandra-db
                ;;
        esac
    fi
}

# Fun√ß√£o para limpeza do sistema
cleanup_system() {
    echo -e "${RED}üßπ Limpeza do Sistema${NC}"
    echo "===================="
    
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o remover√° dados!"
    echo "1. Limpeza suave (containers parados)"
    echo "2. Limpeza completa (+ volumes)"
    echo "3. Limpeza total (+ imagens n√£o utilizadas)"
    echo "4. Cancelar"
    echo -n "Op√ß√£o (1-4): "
    read -r cleanup_option
    
    case $cleanup_option in
        1)
            docker compose down --remove-orphans
            docker container prune -f
            ;;
        2)
            docker compose down --volumes --remove-orphans
            docker volume prune -f
            ;;
        3)
            docker compose down --volumes --remove-orphans
            docker system prune -af
            ;;
        4)
            echo "Opera√ß√£o cancelada."
            ;;
        *)
            echo "Op√ß√£o inv√°lida."
            ;;
    esac
}

# Fun√ß√£o para ver logs
show_logs() {
    echo -e "${BLUE}üìã Logs dos Servi√ßos${NC}"
    echo "==================="
    
    echo "Escolha o servi√ßo:"
    echo "1. Todos os servi√ßos"
    echo "2. HTC Node (node_1)"
    echo "3. Cassandra"
    echo "4. Redis"
    echo "5. DataStax Studio"
    echo -n "Op√ß√£o (1-5): "
    read -r log_option
    
    case $log_option in
        1)
            docker compose logs -f
            ;;
        2)
            docker logs -f node_1
            ;;
        3)
            docker logs -f htc-cassandra-db
            ;;
        4)
            docker logs -f htc-redis
            ;;
        5)
            docker logs -f htc-ds-studio
            ;;
        *)
            echo "Op√ß√£o inv√°lida."
            ;;
    esac
}

# Fun√ß√£o para monitor de performance
performance_monitor() {
    echo -e "${CYAN}üìä Monitor de Performance${NC}"
    echo "========================="
    ./diagnose.sh monitor
}

# Fun√ß√£o para configura√ß√µes avan√ßadas
advanced_config() {
    echo -e "${PURPLE}üõ†Ô∏è  Configura√ß√µes Avan√ßadas${NC}"
    echo "==========================="
    
    echo "1. Aplicar otimiza√ß√µes de sistema (requer root)"
    echo "2. Ver configura√ß√µes atuais"
    echo "3. Editar docker-compose.yml"
    echo "4. Ver portas em uso"
    echo -n "Op√ß√£o (1-4): "
    read -r config_option
    
    case $config_option in
        1)
            if [ "$(id -u)" = "0" ]; then
                echo "Aplicando otimiza√ß√µes..."
                sysctl -w vm.max_map_count=1048575
                sysctl -w vm.swappiness=1
                sysctl -w net.core.rmem_max=134217728
                sysctl -w net.core.wmem_max=134217728
                echo -e "${GREEN}‚úÖ Otimiza√ß√µes aplicadas!${NC}"
            else
                echo -e "${RED}‚ùå Execute como root para aplicar otimiza√ß√µes${NC}"
            fi
            ;;
        2)
            echo "Configura√ß√µes de sistema:"
            echo "vm.max_map_count: $(sysctl -n vm.max_map_count)"
            echo "vm.swappiness: $(sysctl -n vm.swappiness)"
            ;;
        3)
            ${EDITOR:-nano} docker-compose.yml
            ;;
        4)
            echo "Portas em uso pelo HTC:"
            netstat -tlnp | grep -E ":(6379|9042|9091|8558|1600)" || echo "Nenhuma porta HTC em uso"
            ;;
    esac
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${GREEN}‚ùì Ajuda e Documenta√ß√£o${NC}"
    echo "======================="
    
    echo "üìö Arquivos de Documenta√ß√£o:"
    echo "  - README.md                     # Documenta√ß√£o principal"
    echo "  - docs/COMPARISON_GUIDE.md      # Guia de compara√ß√£o"
    echo "  - docs/CASSANDRA_MANAGEMENT_GUIDE.md # Guia do Cassandra"
    echo "  - docs/ACADEMIC_PDF_GUIDE.md    # Guia de PDFs acad√™micos"
    echo ""
    echo "üîó URLs importantes:"
    echo "  - Cassandra: localhost:9042"
    echo "  - Redis: localhost:6379"
    echo "  - DataStax Studio: http://localhost:9091"
    echo "  - HTC Management: http://localhost:8558"
    echo ""
    echo "üõ†Ô∏è  Scripts √∫teis:"
    echo "  - ./start-optimized.sh          # Inicializa√ß√£o otimizada"
    echo "  - ./diagnose.sh                 # Diagn√≥sticos"
    echo "  - ./run_traffic_analysis.sh     # An√°lise de tr√°fego"
    echo "  - ./run_comparison.sh           # Compara√ß√£o de simuladores"
    echo ""
    echo -n "Pressione Enter para continuar..."
    read -r
}

# Fun√ß√£o principal
main() {
    while true; do
        clear
        print_banner
        show_main_menu
        
        read -r choice
        
        case $choice in
            1) start_system ;;
            2) stop_system ;;
            3) restart_system ;;
            4) show_status ;;
            5) run_diagnostics ;;
            6) run_traffic_analysis ;;
            7) run_comparison ;;
            8) generate_pdfs ;;
            9) manage_cassandra ;;
            10) cleanup_system ;;
            11) show_logs ;;
            12) performance_monitor ;;
            13) advanced_config ;;
            14) show_help ;;
            0) 
                echo -e "${GREEN}üëã Obrigado por usar o HTC!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
                sleep 2
                ;;
        esac
        
        if [ "$choice" != "0" ]; then
            echo ""
            echo -n "Pressione Enter para continuar..."
            read -r
        fi
    done
}

# Executar fun√ß√£o principal
main "$@"