#!/usr/bin/env python3
"""
Script para an√°lise detalhada de diferen√ßas entre simula√ß√µes supostamente id√™nticas
"""

import pandas as pd
import json
import sys
from pathlib import Path

# Add the parent directory to Python path
sys.path.append(str(Path(__file__).parent))

from data_sources.cassandra_source import CassandraDataSource

def analyze_detailed_differences(sim1_id, sim2_id, sample_size=1000):
    """
    An√°lise detalhada das diferen√ßas entre duas simula√ß√µes
    """
    print(f"üîç AN√ÅLISE DETALHADA: {sim1_id} vs {sim2_id}")
    print("=" * 60)
    
    # Load data
    cassandra = CassandraDataSource()
    
    print(f"üìä Carregando dados de {sim1_id}...")
    df1 = cassandra.get_vehicle_flow_data(simulation_id=sim1_id, limit=sample_size)
    
    print(f"üìä Carregando dados de {sim2_id}...")
    df2 = cassandra.get_vehicle_flow_data(simulation_id=sim2_id, limit=sample_size)
    
    if df1.empty or df2.empty:
        print("‚ùå Erro: N√£o foi poss√≠vel carregar dados")
        return
    
    print(f"\nüìà ESTAT√çSTICAS B√ÅSICAS:")
    print(f"  ‚Ä¢ {sim1_id}: {len(df1)} registros")
    print(f"  ‚Ä¢ {sim2_id}: {len(df2)} registros")
    
    # Compare basic distributions
    print(f"\nüéØ COMPARA√á√ÉO DE M√âTRICAS:")
    
    # Calculated Speed
    if 'calculated_speed' in df1.columns and 'calculated_speed' in df2.columns:
        speed1 = df1['calculated_speed'].dropna()
        speed2 = df2['calculated_speed'].dropna()
        
        print(f"üìä Calculated Speed:")
        print(f"  ‚Ä¢ {sim1_id}: Œº={speed1.mean():.6f}, œÉ={speed1.std():.6f}")
        print(f"  ‚Ä¢ {sim2_id}: Œº={speed2.mean():.6f}, œÉ={speed2.std():.6f}")
        print(f"  ‚Ä¢ Diferen√ßa em m√©dia: {abs(speed1.mean() - speed2.mean()):.6f}")
    
    # Travel Time
    if 'travel_time' in df1.columns and 'travel_time' in df2.columns:
        time1 = df1['travel_time'].dropna()
        time2 = df2['travel_time'].dropna()
        
        print(f"üìä Travel Time:")
        print(f"  ‚Ä¢ {sim1_id}: Œº={time1.mean():.6f}, œÉ={time1.std():.6f}")
        print(f"  ‚Ä¢ {sim2_id}: Œº={time2.mean():.6f}, œÉ={time2.std():.6f}")
        print(f"  ‚Ä¢ Diferen√ßa em m√©dia: {abs(time1.mean() - time2.mean()):.6f}")
    
    # Event timing analysis
    print(f"\n‚è∞ AN√ÅLISE TEMPORAL (baseada em TICK):")
    
    # Group by tick to see if same events happen at same times
    if 'tick' in df1.columns and 'tick' in df2.columns:
        events_by_tick1 = df1.groupby('tick').size()
        events_by_tick2 = df2.groupby('tick').size()
        
        # Find common ticks
        common_ticks = set(events_by_tick1.index) & set(events_by_tick2.index)
        print(f"  ‚Ä¢ Ticks em comum: {len(common_ticks)}")
        print(f"  ‚Ä¢ Ticks √∫nicos em {sim1_id}: {len(set(events_by_tick1.index) - common_ticks)}")
        print(f"  ‚Ä¢ Ticks √∫nicos em {sim2_id}: {len(set(events_by_tick2.index) - common_ticks)}")
        
        # Sample some events at same tick to see detailed differences
        if common_ticks:
            sample_tick = sorted(list(common_ticks))[len(common_ticks)//2]  # Middle tick
            
            events1_at_tick = df1[df1['tick'] == sample_tick]
            events2_at_tick = df2[df2['tick'] == sample_tick]
            
            print(f"\nüî¨ EVENTOS NO TICK {sample_tick}:")
            print(f"  ‚Ä¢ {sim1_id}: {len(events1_at_tick)} eventos")
            print(f"  ‚Ä¢ {sim2_id}: {len(events2_at_tick)} eventos")
            
            # Compare event types
            if 'event_type' in df1.columns:
                types1 = events1_at_tick['event_type'].value_counts()
                types2 = events2_at_tick['event_type'].value_counts()
                
                print(f"  ‚Ä¢ Tipos de eventos:")
                for event_type in set(types1.index) | set(types2.index):
                    count1 = types1.get(event_type, 0)
                    count2 = types2.get(event_type, 0)
                    print(f"    - {event_type}: {count1} vs {count2}")
    
    # Vehicle analysis
    print(f"\nüöó AN√ÅLISE DE VE√çCULOS:")
    
    if 'car_id' in df1.columns and 'car_id' in df2.columns:
        vehicles1 = set(df1['car_id'].unique())
        vehicles2 = set(df2['car_id'].unique())
        
        common_vehicles = vehicles1 & vehicles2
        unique1 = vehicles1 - vehicles2
        unique2 = vehicles2 - vehicles1
        
        print(f"  ‚Ä¢ Ve√≠culos em comum: {len(common_vehicles)}")
        print(f"  ‚Ä¢ √önicos em {sim1_id}: {len(unique1)}")
        print(f"  ‚Ä¢ √önicos em {sim2_id}: {len(unique2)}")
        
        if unique1:
            print(f"  ‚Ä¢ Primeiros √∫nicos em {sim1_id}: {sorted(list(unique1))[:5]}")
        if unique2:
            print(f"  ‚Ä¢ Primeiros √∫nicos em {sim2_id}: {sorted(list(unique2))[:5]}")
    
    print(f"\nüéØ POSS√çVEIS CAUSAS DE DIFEREN√áAS:")
    print(f"  1. Ordem de processamento de eventos simult√¢neos")
    print(f"  2. Precis√£o num√©rica em c√°lculos de ponto flutuante")
    print(f"  3. Inicializa√ß√£o de geradores de n√∫meros aleat√≥rios")
    print(f"  4. Condi√ß√µes de corrida em processamento paralelo")
    print(f"  5. Diferentes vers√µes de bibliotecas ou configura√ß√µes")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Uso: python detailed_comparison.py <sim1_id> <sim2_id>")
        print("Exemplo: python detailed_comparison.py cenario_1000_viagens_1 cenario_1000_viagens_2")
        sys.exit(1)
    
    sim1_id = sys.argv[1]
    sim2_id = sys.argv[2]
    
    analyze_detailed_differences(sim1_id, sim2_id)