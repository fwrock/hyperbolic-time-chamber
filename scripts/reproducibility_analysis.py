#!/usr/bin/env python3
"""
Script para an√°lise de reprodutibilidade de simula√ß√µes HTC
"""

import sys
import os
from pathlib import Path
import pandas as pd
import argparse
import logging
from datetime import datetime

# Adiciona o diret√≥rio scripts ao PYTHONPATH
SCRIPT_DIR = Path(__file__).parent.resolve()
sys.path.insert(0, str(SCRIPT_DIR))

from config import OUTPUT_PATH, LOGGING_CONFIG
from data_sources.cassandra_source import CassandraDataSource
from data_sources.file_sources import CSVDataSource
from comparison.reference_parser import ReferenceSimulatorParser
from analysis.reproducibility_analyzer import ReproducibilityAnalyzer

def setup_logging():
    """Configura o sistema de logging"""
    logging.basicConfig(**LOGGING_CONFIG)
    return logging.getLogger(__name__)

def load_simulation_run(source_type: str, **kwargs) -> pd.DataFrame:
    """
    Carrega dados de uma execu√ß√£o da simula√ß√£o
    
    Args:
        source_type: Tipo da fonte (cassandra, csv, xml)
        **kwargs: Argumentos espec√≠ficos da fonte
        
    Returns:
        DataFrame com dados da execu√ß√£o
    """
    logger = logging.getLogger(__name__)
    
    if source_type == 'cassandra':
        logger.info("üîå Carregando dados via Cassandra...")
        cassandra_source = CassandraDataSource()
        data = cassandra_source.get_vehicle_flow_data(
            limit=kwargs.get('limit', 999999999),
            simulation_id=kwargs.get('simulation_id')
        )
        
    elif source_type == 'csv':
        logger.info(f"üìÅ Carregando dados via CSV...")
        file_path = kwargs.get('file_path')
        if not file_path or not os.path.isfile(file_path):
            logger.error(f"‚ùå Arquivo CSV n√£o encontrado: {file_path}")
            return pd.DataFrame()
        data = pd.read_csv(file_path)
        
    elif source_type == 'xml':
        logger.info(f"üìÑ Carregando dados via XML...")
        file_path = kwargs.get('file_path')
        if not file_path or not os.path.isfile(file_path):
            logger.error(f"‚ùå Arquivo XML n√£o encontrado: {file_path}")
            return pd.DataFrame()
        parser = ReferenceSimulatorParser(file_path)
        data = parser.get_traffic_flow_events()
        
    else:
        logger.error(f"‚ùå Tipo de fonte n√£o suportado: {source_type}")
        return pd.DataFrame()
    
    if not data.empty:
        logger.info(f"‚úÖ Carregados {len(data)} registros, {data['car_id'].nunique() if 'car_id' in data.columns else 0} ve√≠culos")
    else:
        logger.warning("‚ö†Ô∏è Nenhum dado encontrado")
    
    return data

def analyze_cassandra_runs(simulation_ids: list, limit: int, output_path: Path) -> dict:
    """
    Analisa reprodutibilidade de m√∫ltiplas execu√ß√µes no Cassandra
    
    Args:
        simulation_ids: Lista de IDs de simula√ß√£o
        limit: Limite de registros por simula√ß√£o
        output_path: Caminho para salvar resultados
        
    Returns:
        Resultados da an√°lise de reprodutibilidade
    """
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîÑ Analisando reprodutibilidade de {len(simulation_ids)} simula√ß√µes...")
    
    # Carregar dados de cada simula√ß√£o
    datasets = []
    run_names = []
    
    for i, sim_id in enumerate(simulation_ids):
        logger.info(f"üìä Carregando simula√ß√£o {i+1}/{len(simulation_ids)}: {sim_id}")
        
        data = load_simulation_run(
            'cassandra',
            limit=limit,
            simulation_id=sim_id
        )
        
        if not data.empty:
            datasets.append(data)
            run_names.append(f"Sim_{sim_id}")
        else:
            logger.warning(f"‚ö†Ô∏è Simula√ß√£o {sim_id} n√£o cont√©m dados v√°lidos")
    
    if len(datasets) < 2:
        logger.error("‚ùå S√£o necess√°rias pelo menos 2 simula√ß√µes para an√°lise de reprodutibilidade")
        return {}
    
    # Criar analisador e executar an√°lise
    analyzer = ReproducibilityAnalyzer(
        output_dir=str(output_path / "reproducibility")
    )
    
    analysis = analyzer.analyze_multiple_runs(datasets, run_names)
    
    # Gerar visualiza√ß√µes
    viz_files = analyzer.create_reproducibility_visualizations(datasets, run_names, analysis)
    
    # Gerar relat√≥rio
    report_file = analyzer.generate_reproducibility_report(analysis)
    
    # Imprimir resumo
    analyzer.print_reproducibility_summary(analysis)
    
    logger.info(f"‚úÖ An√°lise de reprodutibilidade conclu√≠da!")
    logger.info(f"üìÅ Arquivos gerados em: {output_path / 'reproducibility'}")
    logger.info(f"üìÑ Relat√≥rio: {report_file}")
    for viz_file in viz_files:
        logger.info(f"üìä Visualiza√ß√£o: {viz_file}")
    
    return analysis

def analyze_file_runs(file_paths: list, source_types: list, output_path: Path) -> dict:
    """
    Analisa reprodutibilidade de m√∫ltiplas execu√ß√µes de arquivos
    
    Args:
        file_paths: Lista de caminhos de arquivos
        source_types: Lista de tipos de fonte correspondentes
        output_path: Caminho para salvar resultados
        
    Returns:
        Resultados da an√°lise de reprodutibilidade
    """
    logger = logging.getLogger(__name__)
    
    logger.info(f"üîÑ Analisando reprodutibilidade de {len(file_paths)} arquivos...")
    
    # Carregar dados de cada arquivo
    datasets = []
    run_names = []
    
    for i, (file_path, source_type) in enumerate(zip(file_paths, source_types)):
        logger.info(f"üìä Carregando arquivo {i+1}/{len(file_paths)}: {file_path}")
        
        data = load_simulation_run(source_type, file_path=file_path)
        
        if not data.empty:
            datasets.append(data)
            file_name = Path(file_path).stem
            run_names.append(f"Run_{file_name}")
        else:
            logger.warning(f"‚ö†Ô∏è Arquivo {file_path} n√£o cont√©m dados v√°lidos")
    
    if len(datasets) < 2:
        logger.error("‚ùå S√£o necess√°rios pelo menos 2 arquivos para an√°lise de reprodutibilidade")
        return {}
    
    # Criar analisador e executar an√°lise
    analyzer = ReproducibilityAnalyzer(
        output_dir=str(output_path / "reproducibility")
    )
    
    analysis = analyzer.analyze_multiple_runs(datasets, run_names)
    
    # Gerar visualiza√ß√µes
    viz_files = analyzer.create_reproducibility_visualizations(datasets, run_names, analysis)
    
    # Gerar relat√≥rio
    report_file = analyzer.generate_reproducibility_report(analysis)
    
    # Imprimir resumo
    analyzer.print_reproducibility_summary(analysis)
    
    logger.info(f"‚úÖ An√°lise de reprodutibilidade conclu√≠da!")
    logger.info(f"üìÅ Arquivos gerados em: {output_path / 'reproducibility'}")
    logger.info(f"üìÑ Relat√≥rio: {report_file}")
    for viz_file in viz_files:
        logger.info(f"üìä Visualiza√ß√£o: {viz_file}")
    
    return analysis

def create_sample_config(output_path: Path):
    """Cria arquivo de configura√ß√£o de exemplo"""
    config_content = """# Configura√ß√£o de An√°lise de Reprodutibilidade

## Exemplo 1: An√°lise via Cassandra
# Especifique os IDs das simula√ß√µes a serem comparadas
--cassandra-sims sim_id_1 sim_id_2 sim_id_3

## Exemplo 2: An√°lise via arquivos CSV
--csv-files run1.csv run2.csv run3.csv

## Exemplo 3: An√°lise via arquivos XML
--xml-files events_run1.xml events_run2.xml events_run3.xml

## Exemplo 4: An√°lise mista
--mixed-files run1.csv:csv events.xml:xml data.csv:csv

## Op√ß√µes adicionais
--limit 50000        # Limitar registros por execu√ß√£o
--output ./results   # Diret√≥rio de sa√≠da

# Interpreta√ß√£o dos Resultados:
# - CV < 0.05: Boa reprodutibilidade
# - CV < 0.1: Reprodutibilidade moderada  
# - CV >= 0.1: Baixa reprodutibilidade (investigar)
#
# - Similaridade >= 0.8: Alta similaridade
# - Similaridade >= 0.6: Similaridade moderada
# - Similaridade < 0.6: Baixa similaridade
"""
    
    config_file = output_path / "reproducibility_config_example.txt"
    with open(config_file, 'w') as f:
        f.write(config_content)
    
    print(f"üìÑ Arquivo de configura√ß√£o de exemplo criado: {config_file}")
    return config_file

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(
        description="Analisador de Reprodutibilidade de Simula√ß√µes HTC",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:

  # An√°lise de simula√ß√µes no Cassandra
  python reproducibility_analysis.py --cassandra-sims sim_001 sim_002 sim_003

  # An√°lise de arquivos CSV
  python reproducibility_analysis.py --csv-files run1.csv run2.csv run3.csv

  # An√°lise de arquivos XML
  python reproducibility_analysis.py --xml-files events1.xml events2.xml

  # An√°lise mista
  python reproducibility_analysis.py --mixed-files run1.csv:csv events.xml:xml

  # Criar exemplo de configura√ß√£o
  python reproducibility_analysis.py --create-config
        """
    )
    
    # Grupos mutuamente exclusivos para tipos de an√°lise
    analysis_group = parser.add_mutually_exclusive_group(required=True)
    
    analysis_group.add_argument('--cassandra-sims', nargs='+', metavar='SIM_ID',
                               help='IDs das simula√ß√µes no Cassandra para comparar')
    
    analysis_group.add_argument('--csv-files', nargs='+', metavar='FILE',
                               help='Arquivos CSV para comparar')
    
    analysis_group.add_argument('--xml-files', nargs='+', metavar='FILE',
                               help='Arquivos XML para comparar')
    
    analysis_group.add_argument('--mixed-files', nargs='+', metavar='FILE:TYPE',
                               help='Arquivos mistos no formato arquivo:tipo (csv|xml)')
    
    analysis_group.add_argument('--create-config', action='store_true',
                               help='Criar arquivo de configura√ß√£o de exemplo')
    
    # Par√¢metros opcionais
    parser.add_argument('--limit', type=int, default=999999999,
                       help='Limite de registros por simula√ß√£o (default: todos)')
    
    parser.add_argument('--output', type=str, 
                       help='Diret√≥rio de sa√≠da (default: scripts/output)')
    
    args = parser.parse_args()
    
    # Setup
    logger = setup_logging()
    output_path = Path(args.output) if args.output else OUTPUT_PATH
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Criar configura√ß√£o de exemplo se solicitado
    if args.create_config:
        create_sample_config(output_path)
        return 0
    
    logger.info("üîÑ Iniciando An√°lise de Reprodutibilidade...")
    logger.info(f"üìÅ Diret√≥rio de sa√≠da: {output_path}")
    
    try:
        results = {}
        
        if args.cassandra_sims:
            if len(args.cassandra_sims) < 2:
                logger.error("‚ùå S√£o necess√°rias pelo menos 2 simula√ß√µes para an√°lise")
                return 1
            
            results = analyze_cassandra_runs(
                args.cassandra_sims,
                args.limit,
                output_path
            )
        
        elif args.csv_files:
            if len(args.csv_files) < 2:
                logger.error("‚ùå S√£o necess√°rios pelo menos 2 arquivos para an√°lise")
                return 1
            
            source_types = ['csv'] * len(args.csv_files)
            results = analyze_file_runs(
                args.csv_files,
                source_types,
                output_path
            )
        
        elif args.xml_files:
            if len(args.xml_files) < 2:
                logger.error("‚ùå S√£o necess√°rios pelo menos 2 arquivos para an√°lise")
                return 1
            
            source_types = ['xml'] * len(args.xml_files)
            results = analyze_file_runs(
                args.xml_files,
                source_types,
                output_path
            )
        
        elif args.mixed_files:
            if len(args.mixed_files) < 2:
                logger.error("‚ùå S√£o necess√°rios pelo menos 2 arquivos para an√°lise")
                return 1
            
            # Parse mixed files format: file:type
            file_paths = []
            source_types = []
            
            for mixed_file in args.mixed_files:
                if ':' not in mixed_file:
                    logger.error(f"‚ùå Formato inv√°lido para arquivo misto: {mixed_file}")
                    logger.error("   Use o formato: arquivo:tipo (ex: data.csv:csv)")
                    return 1
                
                file_path, source_type = mixed_file.split(':', 1)
                
                if source_type not in ['csv', 'xml']:
                    logger.error(f"‚ùå Tipo de arquivo n√£o suportado: {source_type}")
                    logger.error("   Tipos suportados: csv, xml")
                    return 1
                
                file_paths.append(file_path)
                source_types.append(source_type)
            
            results = analyze_file_runs(
                file_paths,
                source_types,
                output_path
            )
        
        if results:
            logger.info("üéâ An√°lise de reprodutibilidade conclu√≠da com sucesso!")
            
            # Exibir resumo final
            print("\n" + "="*80)
            print("üìä RESUMO FINAL DOS ARQUIVOS GERADOS")
            print("="*80)
            print(f"\nüìÅ Todos os arquivos salvos em: {output_path / 'reproducibility'}")
            print(f"üîç Verifique os arquivos:")
            print(f"  üìã RELAT√ìRIOS:")
            print(f"    ‚Ä¢ reproducibility_report.json - Relat√≥rio completo em JSON")
            print(f"    ‚Ä¢ reproducibility_complete_report.pdf - Relat√≥rio PDF consolidado")
            print(f"  üìä GR√ÅFICOS AGRUPADOS:")
            print(f"    ‚Ä¢ reproducibility_dashboard.png/.pdf - Dashboard visual completo")
            print(f"    ‚Ä¢ basic_metrics_comparison.png/.pdf - Compara√ß√£o de m√©tricas b√°sicas")
            print(f"    ‚Ä¢ temporal_reproducibility.png/.pdf - An√°lise temporal agrupada")
            print(f"    ‚Ä¢ similarity_scores.png/.pdf - Scores de similaridade agrupados")
            print(f"  üìà GR√ÅFICOS INDIVIDUAIS:")
            print(f"    ‚Ä¢ metric_*.png/.pdf - Cada m√©trica b√°sica em gr√°fico separado")
            print(f"    ‚Ä¢ temporal_*.png/.pdf - Gr√°ficos temporais individuais")
            print(f"    ‚Ä¢ similarity_*.png/.pdf - Gr√°ficos de similaridade individuais")
            print(f"    ‚Ä¢ distribution_*.png/.pdf - Distribui√ß√µes de cada vari√°vel")
            print("="*80 + "\n")
            
            return 0
        else:
            logger.error("‚ùå Falha na an√°lise de reprodutibilidade")
            return 1
            
    except Exception as e:
        logger.error(f"üí• Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())