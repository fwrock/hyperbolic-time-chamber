#!/bin/bash

# Script de workflow completo para simula√ß√£o HTC
# Prepara Cassandra, executa simula√ß√£o e permite an√°lise
# Uso: ./simulation_workflow.sh [clean|reset|status]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configura√ß√£o
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo -e "${CYAN}"
echo "üöÄ ====================================="
echo "   HTC SIMULATOR - WORKFLOW COMPLETO"
echo "===================================== üöÄ"
echo -e "${NC}"

show_help() {
    echo -e "${BLUE}Uso: $0 [OP√á√ÉO]${NC}"
    echo ""
    echo "OP√á√ïES:"
    echo "  clean   - Limpar dados e executar simula√ß√£o"
    echo "  reset   - Reset completo do Cassandra e executar"
    echo "  status  - Apenas verificar status"
    echo "  help    - Mostrar esta ajuda"
    echo ""
    echo "SEM OP√á√ïES: Workflow padr√£o (verificar, preparar, executar)"
}

# Fun√ß√£o para mostrar status
show_status() {
    echo -e "${BLUE}üìä VERIFICANDO STATUS DO SISTEMA...${NC}"
    echo ""
    
    # Status do Cassandra
    echo -e "${PURPLE}üóÑÔ∏è CASSANDRA:${NC}"
    ./manage_cassandra.sh status
    echo ""
    
    # Status dos dados
    echo -e "${PURPLE}üìä DADOS:${NC}"
    ./check_cassandra_data.sh
    echo ""
}

# Fun√ß√£o para preparar ambiente
prepare_environment() {
    echo -e "${BLUE}üîß PREPARANDO AMBIENTE...${NC}"
    
    # Verificar se Cassandra est√° rodando
    if ! docker ps --format "{{.Names}}" | grep -q "cassandra"; then
        echo -e "${YELLOW}‚ö†Ô∏è Cassandra n√£o est√° rodando. Iniciando...${NC}"
        ./manage_cassandra.sh start
    else
        echo -e "${GREEN}‚úÖ Cassandra j√° est√° rodando${NC}"
    fi
    
    echo ""
}

# Fun√ß√£o para limpar dados
clean_data() {
    echo -e "${BLUE}üßπ LIMPANDO DADOS ANTIGOS...${NC}"
    ./manage_cassandra.sh clean
    echo ""
}

# Fun√ß√£o para reset completo
reset_system() {
    echo -e "${BLUE}‚ôªÔ∏è RESETANDO SISTEMA COMPLETO...${NC}"
    ./manage_cassandra.sh reset
    echo ""
}

# Fun√ß√£o para executar simula√ß√£o
run_simulation() {
    echo -e "${BLUE}üéÆ EXECUTANDO SIMULA√á√ÉO HTC...${NC}"
    echo ""
    
    if [[ -f "$SCRIPT_DIR/build-and-run.sh" ]]; then
        echo -e "${GREEN}‚ñ∂Ô∏è Executando build-and-run.sh...${NC}"
        ./build-and-run.sh
    else
        echo -e "${RED}‚ùå Arquivo build-and-run.sh n√£o encontrado!${NC}"
        echo -e "${YELLOW}üí° Certifique-se de que o arquivo existe no diret√≥rio raiz${NC}"
        return 1
    fi
    
    echo ""
}

# Fun√ß√£o para mostrar op√ß√µes p√≥s-simula√ß√£o
show_analysis_options() {
    echo -e "${CYAN}"
    echo "üéØ ====================================="
    echo "   SIMULA√á√ÉO CONCLU√çDA!"
    echo "===================================== üéØ"
    echo -e "${NC}"
    
    echo -e "${BLUE}üìà OP√á√ïES DE AN√ÅLISE DISPON√çVEIS:${NC}"
    echo ""
    
    echo -e "${GREEN}1. An√°lise de Tr√°fego:${NC}"
    echo "   ./run_traffic_analysis.sh"
    echo ""
    
    echo -e "${GREEN}2. Compara√ß√£o com Simulador de Refer√™ncia:${NC}"
    echo "   ./run_comparison.sh --cassandra reference_events.xml"
    echo ""
    
    echo -e "${GREEN}3. Verificar dados gerados:${NC}"
    echo "   ./check_cassandra_data.sh"
    echo ""
    
    echo -e "${GREEN}4. Parar sistema:${NC}"
    echo "   ./manage_cassandra.sh stop"
    echo ""
    
    echo -e "${YELLOW}üí° Para executar nova simula√ß√£o:${NC}"
    echo "   $0 clean"
    echo ""
}

# Workflow principal
run_main_workflow() {
    echo -e "${BLUE}üîÑ EXECUTANDO WORKFLOW PRINCIPAL...${NC}"
    echo ""
    
    # 1. Verificar status atual
    echo -e "${PURPLE}PASSO 1: Verifica√ß√£o inicial${NC}"
    show_status
    
    # 2. Preparar ambiente
    echo -e "${PURPLE}PASSO 2: Prepara√ß√£o do ambiente${NC}"
    prepare_environment
    
    # 3. Perguntar sobre limpeza de dados
    local current_data=$(docker exec cassandra cqlsh -e "USE htc_simulation; SELECT COUNT(*) FROM vehicle_flow;" 2>/dev/null | grep -E "^\s*[0-9]+" | tr -d ' ' || echo "0")
    
    if [[ "$current_data" != "0" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Encontrados $current_data registros no banco.${NC}"
        echo -e "${YELLOW}Deseja limpar os dados antes da simula√ß√£o? (s/N)${NC}"
        read -r response
        
        if [[ "$response" =~ ^[SsYy]$ ]]; then
            echo -e "${PURPLE}PASSO 3: Limpeza de dados${NC}"
            clean_data
        else
            echo -e "${YELLOW}‚ö†Ô∏è Mantendo dados existentes${NC}"
            echo ""
        fi
    else
        echo -e "${GREEN}‚úÖ Banco est√° limpo${NC}"
        echo ""
    fi
    
    # 4. Executar simula√ß√£o
    echo -e "${PURPLE}PASSO 4: Execu√ß√£o da simula√ß√£o${NC}"
    if run_simulation; then
        # 5. Mostrar op√ß√µes de an√°lise
        show_analysis_options
    else
        echo -e "${RED}‚ùå Falha na execu√ß√£o da simula√ß√£o${NC}"
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    case "${1:-main}" in
        clean)
            prepare_environment
            clean_data
            run_simulation
            show_analysis_options
            ;;
        reset)
            reset_system
            run_simulation
            show_analysis_options
            ;;
        status)
            show_status
            ;;
        help|--help|-h)
            show_help
            ;;
        main)
            run_main_workflow
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Verificar depend√™ncias
check_dependencies() {
    local missing=()
    
    [[ ! -f "./manage_cassandra.sh" ]] && missing+=("manage_cassandra.sh")
    [[ ! -f "./check_cassandra_data.sh" ]] && missing+=("check_cassandra_data.sh")
    [[ ! -f "./build-and-run.sh" ]] && missing+=("build-and-run.sh")
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå Arquivos ausentes:${NC}"
        printf '  %s\n' "${missing[@]}"
        echo ""
        echo -e "${YELLOW}üí° Certifique-se de executar no diret√≥rio raiz do projeto${NC}"
        exit 1
    fi
}

# Executar
check_dependencies
main "$@"