#!/bin/bash

# Script de inicializa√ß√£o otimizada do HTC
# Configura√ß√µes de sistema para alta performance

set -e

echo "üöÄ Iniciando HTC com configura√ß√µes otimizadas..."

# Verificar se docker-compose est√° instalado
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo "‚ùå Docker Compose n√£o encontrado. Instale o Docker Compose primeiro."
    exit 1
fi

# Usar docker compose ou docker-compose baseado na disponibilidade
DOCKER_COMPOSE_CMD="docker compose"
if ! docker compose version &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
fi

# Fun√ß√£o para verificar uso de mem√≥ria do sistema
check_system_resources() {
    echo "üìä Verificando recursos do sistema..."
    
    # Verificar mem√≥ria dispon√≠vel (em GB)
    TOTAL_MEM=$(free -g | awk '/^Mem:/{print $2}')
    AVAILABLE_MEM=$(free -g | awk '/^Mem:/{print $7}')
    
    if [ "$TOTAL_MEM" -lt 8 ]; then
        echo "‚ö†Ô∏è  AVISO: Sistema com pouca mem√≥ria ($TOTAL_MEM GB). Recomendado: 8GB+"
        echo "   Usando configura√ß√£o de recursos reduzida..."
        export COMPOSE_FILE="docker-compose-minimal.yml"
    else
        echo "‚úÖ Mem√≥ria adequada detectada: $TOTAL_MEM GB total, $AVAILABLE_MEM GB dispon√≠vel"
        export COMPOSE_FILE="docker-compose-optimized.yml"
    fi
}

# Fun√ß√£o para limpar containers antigos
cleanup_containers() {
    echo "üßπ Limpando containers antigos..."
    
    $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" down --remove-orphans 2>/dev/null || true
    
    # Remover volumes √≥rf√£os se necess√°rio
    if [ "$1" = "--clean-volumes" ]; then
        echo "üóëÔ∏è  Removendo volumes antigos..."
        docker volume prune -f 2>/dev/null || true
    fi
}

# Fun√ß√£o para aplicar otimiza√ß√µes do sistema
apply_system_optimizations() {
    echo "‚öôÔ∏è  Aplicando otimiza√ß√µes do sistema..."
    
    # Aumentar limites do sistema para Cassandra
    if [ "$(id -u)" = "0" ]; then
        # Configura√ß√µes sysctl para rede
        sysctl -w net.core.rmem_max=134217728 2>/dev/null || true
        sysctl -w net.core.wmem_max=134217728 2>/dev/null || true
        sysctl -w net.ipv4.tcp_rmem="4096 65536 134217728" 2>/dev/null || true
        sysctl -w net.ipv4.tcp_wmem="4096 65536 134217728" 2>/dev/null || true
        
        # Configura√ß√µes de mem√≥ria virtual
        sysctl -w vm.max_map_count=1048575 2>/dev/null || true
        sysctl -w vm.swappiness=1 2>/dev/null || true
        
        echo "‚úÖ Otimiza√ß√µes do sistema aplicadas (modo root)"
    else
        echo "‚ö†Ô∏è  Execute como root para aplicar otimiza√ß√µes completas do sistema"
        echo "   Continuando sem otimiza√ß√µes de kernel..."
    fi
}

# Fun√ß√£o para verificar status dos servi√ßos
check_services_health() {
    echo "üîç Verificando sa√∫de dos servi√ßos..."
    
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        attempt=$((attempt + 1))
        echo "   Tentativa $attempt/$max_attempts..."
        
        # Verificar Redis
        if docker exec htc-redis redis-cli ping > /dev/null 2>&1; then
            echo "   ‚úÖ Redis: OK"
        else
            echo "   ‚è≥ Redis: Iniciando..."
            sleep 2
            continue
        fi
        
        # Verificar Cassandra
        if docker exec htc-cassandra-db cqlsh -e "DESCRIBE KEYSPACES" > /dev/null 2>&1; then
            echo "   ‚úÖ Cassandra: OK"
            break
        else
            echo "   ‚è≥ Cassandra: Iniciando... (pode levar alguns minutos)"
            sleep 10
        fi
    done
    
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ùå Timeout: Servi√ßos n√£o iniciaram completamente em tempo h√°bil"
        echo "   Verifique os logs com: $DOCKER_COMPOSE_CMD -f $COMPOSE_FILE logs"
        return 1
    fi
    
    echo "‚úÖ Todos os servi√ßos est√£o funcionando!"
}

# Fun√ß√£o para criar keyspaces e tabelas necess√°rias
initialize_database() {
    echo "üèóÔ∏è  Inicializando banco de dados..."
    
    # Aguardar Cassandra estar completamente pronto
    sleep 10
    
    # Criar keyspaces e tabelas via script CQL
    docker exec htc-cassandra-db cqlsh -f /docker-entrypoint-initdb.d/init.cql 2>/dev/null || {
        echo "‚ö†Ô∏è  Script de inicializa√ß√£o n√£o encontrado. Criando estrutura b√°sica..."
        
        docker exec htc-cassandra-db cqlsh -e "
            CREATE KEYSPACE IF NOT EXISTS htc_persistence 
            WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
            
            CREATE KEYSPACE IF NOT EXISTS htc_reports 
            WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
            
            USE htc_persistence;
            
            CREATE TABLE IF NOT EXISTS messages (
                persistence_id text,
                partition_nr bigint,
                sequence_nr bigint,
                timestamp timeuuid,
                timebucket text,
                writer_uuid text,
                ser_id int,
                ser_manifest text,
                event_manifest text,
                event blob,
                meta_ser_id int,
                meta_ser_manifest text,
                meta blob,
                tags set<text>,
                PRIMARY KEY ((persistence_id, partition_nr), sequence_nr, timestamp)
            ) WITH CLUSTERING ORDER BY (sequence_nr ASC, timestamp ASC);
            
            CREATE TABLE IF NOT EXISTS snapshots (
                persistence_id text,
                sequence_nr bigint,
                timestamp timeuuid,
                ser_id int,
                ser_manifest text,
                snapshot_data blob,
                snapshot blob,
                meta_ser_id int,
                meta_ser_manifest text,
                meta blob,
                PRIMARY KEY (persistence_id, sequence_nr)
            ) WITH CLUSTERING ORDER BY (sequence_nr DESC);
        " || true
    }
    
    echo "‚úÖ Banco de dados inicializado!"
}

# Fun√ß√£o para iniciar aplica√ß√£o
start_application() {
    echo "üöÄ Iniciando aplica√ß√£o HTC..."
    
    # Aguardar mais um pouco para garantir estabilidade
    sleep 5
    
    # Iniciar container da aplica√ß√£o
    $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" up node1 --no-deps
}

# Fun√ß√£o para mostrar informa√ß√µes de monitoramento
show_monitoring_info() {
    echo "üìä Informa√ß√µes de Monitoramento:"
    echo "   üîó Cassandra: localhost:9042"
    echo "   üîó Redis: localhost:6379" 
    echo "   üîó DataStax Studio: http://localhost:9091"
    echo "   üîó HTC Management: http://localhost:8558"
    echo ""
    echo "üìã Comandos √∫teis:"
    echo "   Ver logs: $DOCKER_COMPOSE_CMD -f $COMPOSE_FILE logs -f [servi√ßo]"
    echo "   Status: $DOCKER_COMPOSE_CMD -f $COMPOSE_FILE ps"
    echo "   Parar: $DOCKER_COMPOSE_CMD -f $COMPOSE_FILE down"
    echo "   Console Cassandra: docker exec -it htc-cassandra-db cqlsh"
    echo "   Console Redis: docker exec -it htc-redis redis-cli"
}

# Fun√ß√£o principal
main() {
    echo "üéØ HTC - Hyperbolic Time Chamber - Inicializa√ß√£o Otimizada"
    echo "=========================================================="
    
    # Parse argumentos
    CLEAN_VOLUMES=false
    for arg in "$@"; do
        case $arg in
            --clean-volumes)
                CLEAN_VOLUMES=true
                shift
                ;;
            --help|-h)
                echo "Uso: $0 [--clean-volumes] [--help]"
                echo "  --clean-volumes: Remove volumes antigos antes de iniciar"
                echo "  --help: Mostra esta ajuda"
                exit 0
                ;;
        esac
    done
    
    # Executar etapas de inicializa√ß√£o
    check_system_resources
    
    if [ "$CLEAN_VOLUMES" = true ]; then
        cleanup_containers --clean-volumes
    else
        cleanup_containers
    fi
    
    apply_system_optimizations
    
    echo "üê≥ Iniciando servi√ßos de infraestrutura..."
    $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" up -d redis cassandra ds-studio
    
    check_services_health
    initialize_database
    show_monitoring_info
    
    echo "üéâ Sistema pronto! Iniciando aplica√ß√£o..."
    echo "   Use Ctrl+C para parar a aplica√ß√£o"
    echo ""
    
    # Iniciar aplica√ß√£o em primeiro plano
    start_application
}

# Capturar sinais para cleanup
trap 'echo "üõë Parando sistema..."; $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" down; exit 0' INT TERM

# Executar fun√ß√£o principal
main "$@"