#!/bin/bash

# Script para gerar relat√≥rios PDF acad√™micos de alta qualidade
# Ideal para inclus√£o em artigos cient√≠ficos

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Diret√≥rios
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OUTPUT_DIR="$SCRIPT_DIR/scripts/output/academic_reports"

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    echo -e "${PURPLE}================================================================${NC}"
    echo -e "${WHITE}üìÑ GERADOR DE PDFs ACAD√äMICOS - HTC SIMULATOR${NC}"
    echo -e "${WHITE}   Relat√≥rios de alta qualidade para artigos cient√≠ficos${NC}"
    echo -e "${PURPLE}================================================================${NC}"
    echo ""
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo -e "${CYAN}üîç Verificando depend√™ncias para gera√ß√£o de PDFs...${NC}"
    
    # Verificar Python
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python3 n√£o encontrado${NC}"
        exit 1
    fi
    
    # Verificar depend√™ncias Python
    local missing_deps=()
    
    if ! python3 -c "import matplotlib" 2>/dev/null; then
        missing_deps+=("matplotlib")
    fi
    
    if ! python3 -c "import seaborn" 2>/dev/null; then
        missing_deps+=("seaborn")
    fi
    
    if ! python3 -c "import plotly" 2>/dev/null; then
        missing_deps+=("plotly")
    fi
    
    if ! python3 -c "import kaleido" 2>/dev/null; then
        missing_deps+=("kaleido")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Algumas depend√™ncias est√£o faltando:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo "   - $dep"
        done
        echo ""
        echo -e "${CYAN}üí° Para instalar as depend√™ncias:${NC}"
        echo "   pip install matplotlib seaborn plotly kaleido"
        echo ""
        read -p "Deseja instalar automaticamente? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${CYAN}üì¶ Instalando depend√™ncias...${NC}"
            pip install matplotlib seaborn plotly kaleido
            echo -e "${GREEN}‚úÖ Depend√™ncias instaladas!${NC}"
        else
            echo -e "${RED}‚ùå N√£o √© poss√≠vel gerar PDFs sem as depend√™ncias${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}‚úÖ Todas as depend√™ncias est√£o instaladas!${NC}"
    fi
    echo ""
}

# Fun√ß√£o para verificar se Cassandra est√° rodando
check_cassandra() {
    echo -e "${CYAN}üîç Verificando Cassandra...${NC}"
    
    if command -v docker &> /dev/null; then
        if docker ps | grep -q cassandra; then
            echo -e "${GREEN}‚úÖ Cassandra est√° rodando${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è Cassandra n√£o est√° rodando${NC}"
            echo -e "${CYAN}üí° Para iniciar: ./manage_cassandra.sh start${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Docker n√£o encontrado, n√£o √© poss√≠vel verificar Cassandra${NC}"
        return 1
    fi
}

# Fun√ß√£o para gerar PDF de an√°lise de tr√°fego
generate_traffic_pdf() {
    echo -e "${BLUE}üìä Gerando PDF de An√°lise de Tr√°fego...${NC}"
    
    if check_cassandra; then
        echo "   üìç Usando dados do Cassandra"
        python3 "$SCRIPT_DIR/scripts/run_traffic_analysis.py" --source cassandra --limit 5000
    else
        # Procurar por arquivos CSV
        csv_files=$(find "$SCRIPT_DIR" -name "*.csv" -type f | head -1)
        if [ -n "$csv_files" ]; then
            echo "   üìç Usando dados do CSV: $csv_files"
            python3 "$SCRIPT_DIR/scripts/run_traffic_analysis.py" --source csv --file "$csv_files"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Nenhuma fonte de dados encontrada para an√°lise de tr√°fego${NC}"
            echo -e "${CYAN}üí° Execute uma simula√ß√£o primeiro ou inicie o Cassandra${NC}"
            return 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ PDF de an√°lise de tr√°fego gerado!${NC}"
}

# Fun√ß√£o para gerar PDF de compara√ß√£o
generate_comparison_pdf() {
    echo -e "${BLUE}üî¨ Gerando PDF de Compara√ß√£o de Simuladores...${NC}"
    
    # Procurar por arquivo XML de refer√™ncia
    xml_files=$(find "$SCRIPT_DIR" -name "*.xml" -type f | grep -E "(matsim|sumo|reference)" | head -1)
    
    if [ -z "$xml_files" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum arquivo XML de refer√™ncia encontrado${NC}"
        echo -e "${CYAN}üí° Criando arquivo de exemplo...${NC}"
        python3 "$SCRIPT_DIR/scripts/compare_simulators.py" --create-sample
        xml_files="$SCRIPT_DIR/scripts/output/sample_reference_events.xml"
    fi
    
    echo "   üìç Usando arquivo XML: $(basename "$xml_files")"
    
    if check_cassandra; then
        echo "   üìç Comparando com dados do Cassandra"
        python3 "$SCRIPT_DIR/scripts/compare_simulators.py" --htc-cassandra --limit 5000 "$xml_files"
    else
        # Procurar por arquivos CSV
        csv_files=$(find "$SCRIPT_DIR" -name "*.csv" -type f | head -1)
        if [ -n "$csv_files" ]; then
            echo "   üìç Comparando com dados do CSV: $(basename "$csv_files")"
            python3 "$SCRIPT_DIR/scripts/compare_simulators.py" --htc-csv "$csv_files" "$xml_files"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Nenhuma fonte de dados HTC encontrada${NC}"
            echo -e "${CYAN}üí° Execute uma simula√ß√£o primeiro ou inicie o Cassandra${NC}"
            return 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ PDF de compara√ß√£o gerado!${NC}"
}

# Fun√ß√£o para gerar PDF de compara√ß√£o individual
generate_individual_pdf() {
    echo -e "${BLUE}üéØ Gerando PDF de Compara√ß√£o Individual...${NC}"
    
    # Verificar se existe dados de compara√ß√£o individual
    if [ -f "$SCRIPT_DIR/scripts/output/comparison/individual_comparison_report.json" ]; then
        echo "   üìç Usando dados de compara√ß√£o individual existentes"
        python3 -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/scripts')
from visualization.academic_viz import create_academic_pdf_report
import json

# Carregar dados existentes
with open('$SCRIPT_DIR/scripts/output/comparison/individual_comparison_report.json', 'r') as f:
    individual_results = json.load(f)

# Gerar PDF
create_academic_pdf_report(
    'individual',
    individual_results=individual_results,
    output_path='$OUTPUT_DIR',
    filename='individual_comparison_academic.pdf'
)
print('‚úÖ PDF de compara√ß√£o individual gerado!')
"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Dados de compara√ß√£o individual n√£o encontrados${NC}"
        echo -e "${CYAN}üí° Execute primeiro: python3 scripts/comparison/individual_comparator.py${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ PDF de compara√ß√£o individual gerado!${NC}"
}

# Fun√ß√£o para mostrar arquivos gerados
show_generated_files() {
    echo ""
    echo -e "${PURPLE}================================================================${NC}"
    echo -e "${WHITE}üìÑ ARQUIVOS PDF GERADOS${NC}"
    echo -e "${PURPLE}================================================================${NC}"
    
    if [ -d "$OUTPUT_DIR" ]; then
        pdf_files=$(find "$OUTPUT_DIR" -name "*.pdf" -type f)
        
        if [ -n "$pdf_files" ]; then
            echo -e "${GREEN}üìÅ Diret√≥rio: $OUTPUT_DIR${NC}"
            echo ""
            
            while IFS= read -r pdf_file; do
                filename=$(basename "$pdf_file")
                filesize=$(du -h "$pdf_file" | cut -f1)
                echo -e "   üìÑ ${filename} ${CYAN}(${filesize})${NC}"
            done <<< "$pdf_files"
            
            echo ""
            echo -e "${CYAN}üí° Dicas para uso acad√™mico:${NC}"
            echo "   ‚Ä¢ PDFs t√™m 300 DPI (alta qualidade para impress√£o)"
            echo "   ‚Ä¢ Fontes compat√≠veis com LaTeX (Times New Roman)"
            echo "   ‚Ä¢ Gr√°ficos otimizados para publica√ß√£o"
            echo "   ‚Ä¢ Cores adequadas para impress√£o em escala de cinza"
            
        else
            echo -e "${YELLOW}‚ö†Ô∏è Nenhum arquivo PDF encontrado${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio de output n√£o encontrado${NC}"
    fi
}

# Fun√ß√£o principal
main() {
    print_header
    
    # Verificar depend√™ncias
    check_dependencies
    
    # Criar diret√≥rio de output
    mkdir -p "$OUTPUT_DIR"
    
    # Menu de op√ß√µes se nenhum argumento fornecido
    if [ $# -eq 0 ]; then
        echo -e "${CYAN}üéØ Selecione o tipo de relat√≥rio PDF para gerar:${NC}"
        echo ""
        echo "1) üìä An√°lise de Tr√°fego"
        echo "2) üî¨ Compara√ß√£o de Simuladores"
        echo "3) üéØ Compara√ß√£o Individual"
        echo "4) üìÑ Todos os PDFs"
        echo "5) üìã Listar PDFs existentes"
        echo "0) ‚ùå Sair"
        echo ""
        read -p "Digite sua op√ß√£o (0-5): " -n 1 -r
        echo
        
        case $REPLY in
            1)
                generate_traffic_pdf
                ;;
            2)
                generate_comparison_pdf
                ;;
            3)
                generate_individual_pdf
                ;;
            4)
                echo -e "${BLUE}üìÑ Gerando todos os PDFs...${NC}"
                echo ""
                generate_traffic_pdf
                echo ""
                generate_comparison_pdf
                echo ""
                generate_individual_pdf
                ;;
            5)
                show_generated_files
                exit 0
                ;;
            0)
                echo -e "${CYAN}üëã Saindo...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
                exit 1
                ;;
        esac
    else
        # Processar argumentos de linha de comando
        case "$1" in
            "traffic")
                generate_traffic_pdf
                ;;
            "comparison")
                generate_comparison_pdf
                ;;
            "individual")
                generate_individual_pdf
                ;;
            "all")
                generate_traffic_pdf
                echo ""
                generate_comparison_pdf
                echo ""
                generate_individual_pdf
                ;;
            "list")
                show_generated_files
                exit 0
                ;;
            "help"|"--help"|"-h")
                echo "Uso: $0 [traffic|comparison|individual|all|list]"
                echo ""
                echo "Op√ß√µes:"
                echo "  traffic      - Gerar PDF de an√°lise de tr√°fego"
                echo "  comparison   - Gerar PDF de compara√ß√£o de simuladores"
                echo "  individual   - Gerar PDF de compara√ß√£o individual"
                echo "  all          - Gerar todos os PDFs"
                echo "  list         - Listar PDFs existentes"
                echo "  help         - Mostrar esta ajuda"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $1${NC}"
                echo "Use '$0 help' para ver as op√ß√µes dispon√≠veis"
                exit 1
                ;;
        esac
    fi
    
    echo ""
    show_generated_files
    
    echo ""
    echo -e "${GREEN}üéâ Gera√ß√£o de PDFs conclu√≠da!${NC}"
    echo -e "${CYAN}üìñ Use os PDFs gerados em seus artigos cient√≠ficos${NC}"
}

# Executar fun√ß√£o principal
main "$@"